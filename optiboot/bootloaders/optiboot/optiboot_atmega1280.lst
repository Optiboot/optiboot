
optiboot_atmega1280.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0001ff2f  000003c3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032f  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  000003c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      0000002f  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ec  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c5  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c7  00000000  00000000  00000ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028c  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000449  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00001a0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
   1fc00:	01 c0       	rjmp	.+2      	; 0x1fc04 <main>
   1fc02:	22 c1       	rjmp	.+580    	; 0x1fe48 <do_spm>

0001fc04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
   1fc04:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) ||	\
    defined(__AVR_ATmega16__)   || defined(__AVR_ATmega162__) ||	\
    defined (__AVR_ATmega128__)
  ch = MCUCSR;
#else
  ch = MCUSR;
   1fc06:	84 b7       	in	r24, 0x34	; 52
#endif
  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
   1fc08:	88 23       	and	r24, r24
   1fc0a:	69 f0       	breq	.+26     	; 0x1fc26 <main+0x22>
       *  2. we clear WDRF if it's set with EXTRF to avoid loops
       * One problematic scenario: broken application code sets watchdog timer 
       * without clearing MCUSR before and triggers it quickly. But it's
       * recoverable by power-on with pushed reset button.
       */
      if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { 
   1fc0c:	98 2f       	mov	r25, r24
   1fc0e:	9a 70       	andi	r25, 0x0A	; 10
   1fc10:	92 30       	cpi	r25, 0x02	; 2
   1fc12:	49 f0       	breq	.+18     	; 0x1fc26 <main+0x22>
	  if (ch & _BV(EXTRF)) {
   1fc14:	81 ff       	sbrs	r24, 1
   1fc16:	02 c0       	rjmp	.+4      	; 0x1fc1c <main+0x18>
    defined(__AVR_ATmega16__)   || defined(__AVR_ATmega162__) ||	\
    defined(__AVR_ATmega128__)
               // Fix missing definitions in avr-libc
	      MCUCSR = ~(_BV(WDRF));
#else
	      MCUSR = ~(_BV(WDRF));
   1fc18:	97 ef       	ldi	r25, 0xF7	; 247
   1fc1a:	94 bf       	out	0x34, r25	; 52
	  /* 
	   * save the reset flags in the designated register
	   * This can be saved in a main program by putting code in .init0 (which
	   * executes before normal c init code) to save R2 to a global variable.
	   */
	  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (ch));
   1fc1c:	28 2e       	mov	r2, r24

	  // switch off watchdog
	  watchdogConfig(WATCHDOG_OFF);
   1fc1e:	80 e0       	ldi	r24, 0x00	; 0
   1fc20:	fe d0       	rcall	.+508    	; 0x1fe1e <watchdogConfig>
	  // Note that appstart_vec is defined so that this works with either
	  // real or virtual boot partitions.
	   __asm__ __volatile__ (
   1fc22:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer. 
#elif defined(__AVR_ATtiny43__)
  #error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc26:	85 e0       	ldi	r24, 0x05	; 5
   1fc28:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  LINBTR = (1 << LDISR) | (8 << LBT0); 
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0); 
  LINDAT=0;
    #else
      #ifndef SINGLESPEED
  UART_SRA = _BV(U2X0); //Double speed mode USART0
   1fc2c:	82 e0       	ldi	r24, 0x02	; 2
   1fc2e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      #endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
   1fc32:	88 e1       	ldi	r24, 0x18	; 24
   1fc34:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
   1fc38:	86 e0       	ldi	r24, 0x06	; 6
   1fc3a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UART_SRL = (uint8_t)BAUD_SETTING;
   1fc3e:	80 e1       	ldi	r24, 0x10	; 16
   1fc40:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    #endif // LIN_UART
  #endif // mega8/etc
#endif // soft_uart

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
   1fc44:	8e e0       	ldi	r24, 0x0E	; 14
   1fc46:	eb d0       	rcall	.+470    	; 0x1fe1e <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH) || defined(LED_START_ON)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc48:	27 9a       	sbi	0x04, 7	; 4
   1fc4a:	86 e0       	ldi	r24, 0x06	; 6
    	TIFR = _BV(TOV1);
    	while(!(TIFR & _BV(TOV1)));
	#elif defined(__AVR_ATtiny43__)
  		#error "LED flash for Tiny43 not yet supported"
	#else
  		TCNT1 = -(F_CPU/(1024*16));
   1fc4c:	20 e3       	ldi	r18, 0x30	; 48
   1fc4e:	3c ef       	ldi	r19, 0xFC	; 252
    	TIFR1 = _BV(TOV1);
   1fc50:	91 e0       	ldi	r25, 0x01	; 1
  		TCNT1 = -(F_CPU/(1024*16));
   1fc52:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
   1fc56:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    	TIFR1 = _BV(TOV1);
   1fc5a:	96 bb       	out	0x16, r25	; 22
    	while(!(TIFR1 & _BV(TOV1)));
   1fc5c:	b0 9b       	sbis	0x16, 0	; 22
   1fc5e:	fe cf       	rjmp	.-4      	; 0x1fc5c <main+0x58>
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||	\
    defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||	\
    defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
   1fc60:	1f 9a       	sbi	0x03, 7	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc62:	a8 95       	wdr
    if (UART_SRA & _BV(RXC0))
   1fc64:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fc68:	47 fd       	sbrc	r20, 7
   1fc6a:	02 c0       	rjmp	.+4      	; 0x1fc70 <main+0x6c>
   1fc6c:	81 50       	subi	r24, 0x01	; 1
  } while (--count);
   1fc6e:	89 f7       	brne	.-30     	; 0x1fc52 <main+0x4e>
	  putch(optiboot_version & 0xFF);
   1fc70:	ff 24       	eor	r15, r15
   1fc72:	f3 94       	inc	r15
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
   1fc74:	55 e0       	ldi	r21, 0x05	; 5
   1fc76:	e5 2e       	mov	r14, r21
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    __boot_rww_enable_short();
   1fc78:	61 e1       	ldi	r22, 0x11	; 17
    ch = getch();
   1fc7a:	d6 2e       	mov	r13, r22
    if(ch == STK_GET_PARAMETER) {
   1fc7c:	c4 d0       	rcall	.+392    	; 0x1fe06 <getch>
      unsigned char which = getch();
   1fc7e:	81 34       	cpi	r24, 0x41	; 65
   1fc80:	c9 f4       	brne	.+50     	; 0x1fcb4 <main+0xb0>
   1fc82:	c1 d0       	rcall	.+386    	; 0x1fe06 <getch>
      verifySpace();
   1fc84:	c8 2f       	mov	r28, r24
   1fc86:	d1 d0       	rcall	.+418    	; 0x1fe2a <verifySpace>
      if (which == STK_SW_MINOR) {
   1fc88:	c2 38       	cpi	r28, 0x82	; 130
   1fc8a:	11 f4       	brne	.+4      	; 0x1fc90 <main+0x8c>
	  putch(optiboot_version & 0xFF);
   1fc8c:	81 e0       	ldi	r24, 0x01	; 1
   1fc8e:	10 c0       	rjmp	.+32     	; 0x1fcb0 <main+0xac>
      } else if (which == STK_SW_MAJOR) {
   1fc90:	c1 38       	cpi	r28, 0x81	; 129
   1fc92:	69 f4       	brne	.+26     	; 0x1fcae <main+0xaa>
	  putch(optiboot_version >> 8);
   1fc94:	88 e0       	ldi	r24, 0x08	; 8
   1fc96:	0c c0       	rjmp	.+24     	; 0x1fcb0 <main+0xac>
    else if(ch == STK_READ_PAGE) {
   1fc98:	84 37       	cpi	r24, 0x74	; 116
   1fc9a:	09 f4       	brne	.+2      	; 0x1fc9e <main+0x9a>
    else if(ch == STK_READ_SIGN) {
   1fc9c:	82 c0       	rjmp	.+260    	; 0x1fda2 <main+0x19e>
   1fc9e:	85 37       	cpi	r24, 0x75	; 117
      verifySpace();
   1fca0:	09 f0       	breq	.+2      	; 0x1fca4 <main+0xa0>
      putch(SIGNATURE_0);
   1fca2:	a2 c0       	rjmp	.+324    	; 0x1fde8 <main+0x1e4>
   1fca4:	c2 d0       	rcall	.+388    	; 0x1fe2a <verifySpace>
   1fca6:	8e e1       	ldi	r24, 0x1E	; 30
      putch(SIGNATURE_1);
   1fca8:	a7 d0       	rcall	.+334    	; 0x1fdf8 <putch>
   1fcaa:	87 e9       	ldi	r24, 0x97	; 151
   1fcac:	a5 d0       	rcall	.+330    	; 0x1fdf8 <putch>
	putch(0x03);
   1fcae:	83 e0       	ldi	r24, 0x03	; 3
   1fcb0:	a3 d0       	rcall	.+326    	; 0x1fdf8 <putch>
   1fcb2:	9f c0       	rjmp	.+318    	; 0x1fdf2 <main+0x1ee>
    else if(ch == STK_SET_DEVICE) {
   1fcb4:	82 34       	cpi	r24, 0x42	; 66
   1fcb6:	11 f4       	brne	.+4      	; 0x1fcbc <main+0xb8>
      getNch(20);
   1fcb8:	84 e1       	ldi	r24, 0x14	; 20
    else if(ch == STK_SET_DEVICE_EXT) {
   1fcba:	03 c0       	rjmp	.+6      	; 0x1fcc2 <main+0xbe>
      getNch(5);
   1fcbc:	85 34       	cpi	r24, 0x45	; 69
   1fcbe:	19 f4       	brne	.+6      	; 0x1fcc6 <main+0xc2>
   1fcc0:	85 e0       	ldi	r24, 0x05	; 5
   1fcc2:	bb d0       	rcall	.+374    	; 0x1fe3a <getNch>
    else if(ch == STK_LOAD_ADDRESS) {
   1fcc4:	96 c0       	rjmp	.+300    	; 0x1fdf2 <main+0x1ee>
   1fcc6:	85 35       	cpi	r24, 0x55	; 85
      address.bytes[0] = getch();
   1fcc8:	79 f4       	brne	.+30     	; 0x1fce8 <main+0xe4>
   1fcca:	9d d0       	rcall	.+314    	; 0x1fe06 <getch>
   1fccc:	08 2f       	mov	r16, r24
      address.bytes[1] = getch();
   1fcce:	9b d0       	rcall	.+310    	; 0x1fe06 <getch>
   1fcd0:	18 2f       	mov	r17, r24
   1fcd2:	87 ff       	sbrs	r24, 7
      if (address.bytes[1] & 0x80) {
   1fcd4:	03 c0       	rjmp	.+6      	; 0x1fcdc <main+0xd8>
        RAMPZ |= 0x01;
   1fcd6:	8b b7       	in	r24, 0x3b	; 59
   1fcd8:	81 60       	ori	r24, 0x01	; 1
        RAMPZ &= 0xFE;
   1fcda:	02 c0       	rjmp	.+4      	; 0x1fce0 <main+0xdc>
   1fcdc:	8b b7       	in	r24, 0x3b	; 59
      address.word *= 2; // Convert from word address to byte address
   1fcde:	8e 7f       	andi	r24, 0xFE	; 254
   1fce0:	8b bf       	out	0x3b, r24	; 59
   1fce2:	00 0f       	add	r16, r16
    else if(ch == STK_UNIVERSAL) {
   1fce4:	11 1f       	adc	r17, r17
   1fce6:	84 c0       	rjmp	.+264    	; 0x1fdf0 <main+0x1ec>
      if ( AVR_OP_LOAD_EXT_ADDR == getch() ) {
   1fce8:	86 35       	cpi	r24, 0x56	; 86
   1fcea:	81 f4       	brne	.+32     	; 0x1fd0c <main+0x108>
   1fcec:	8c d0       	rcall	.+280    	; 0x1fe06 <getch>
        getch();  // get '0'
   1fcee:	8d 34       	cpi	r24, 0x4D	; 77
   1fcf0:	49 f4       	brne	.+18     	; 0x1fd04 <main+0x100>
        RAMPZ = (RAMPZ & 0x01) | ((getch() << 1) & 0xff);  // get address and put it in RAMPZ
   1fcf2:	89 d0       	rcall	.+274    	; 0x1fe06 <getch>
   1fcf4:	cb b7       	in	r28, 0x3b	; 59
   1fcf6:	87 d0       	rcall	.+270    	; 0x1fe06 <getch>
   1fcf8:	c1 70       	andi	r28, 0x01	; 1
   1fcfa:	88 0f       	add	r24, r24
   1fcfc:	c8 2b       	or	r28, r24
        getNch(1); // get last '0'
   1fcfe:	cb bf       	out	0x3b, r28	; 59
        getNch(3);
   1fd00:	81 e0       	ldi	r24, 0x01	; 1
   1fd02:	01 c0       	rjmp	.+2      	; 0x1fd06 <main+0x102>
   1fd04:	83 e0       	ldi	r24, 0x03	; 3
        putch(0x00);
   1fd06:	99 d0       	rcall	.+306    	; 0x1fe3a <getNch>
   1fd08:	80 e0       	ldi	r24, 0x00	; 0
    else if(ch == STK_PROG_PAGE) {
   1fd0a:	d2 cf       	rjmp	.-92     	; 0x1fcb0 <main+0xac>
   1fd0c:	84 36       	cpi	r24, 0x64	; 100
      GETLENGTH(length);
   1fd0e:	09 f0       	breq	.+2      	; 0x1fd12 <main+0x10e>
   1fd10:	c3 cf       	rjmp	.-122    	; 0x1fc98 <main+0x94>
   1fd12:	79 d0       	rcall	.+242    	; 0x1fe06 <getch>
   1fd14:	c8 2f       	mov	r28, r24
   1fd16:	d0 e0       	ldi	r29, 0x00	; 0
   1fd18:	dc 2f       	mov	r29, r28
   1fd1a:	cc 27       	eor	r28, r28
   1fd1c:	74 d0       	rcall	.+232    	; 0x1fe06 <getch>
      desttype = getch();
   1fd1e:	c8 2b       	or	r28, r24
   1fd20:	72 d0       	rcall	.+228    	; 0x1fe06 <getch>
   1fd22:	c8 2e       	mov	r12, r24
      GETLENGTH(length);
   1fd24:	5e 01       	movw	r10, r28
      desttype = getch();
   1fd26:	81 2c       	mov	r8, r1
   1fd28:	32 e0       	ldi	r19, 0x02	; 2
   1fd2a:	93 2e       	mov	r9, r19
      do *bufPtr++ = getch();
   1fd2c:	6c d0       	rcall	.+216    	; 0x1fe06 <getch>
   1fd2e:	f4 01       	movw	r30, r8
   1fd30:	81 93       	st	Z+, r24
   1fd32:	4f 01       	movw	r8, r30
   1fd34:	f1 e0       	ldi	r31, 0x01	; 1
      while (--length);
   1fd36:	af 1a       	sub	r10, r31
   1fd38:	b1 08       	sbc	r11, r1
   1fd3a:	c1 f7       	brne	.-16     	; 0x1fd2c <main+0x128>
      verifySpace();
   1fd3c:	76 d0       	rcall	.+236    	; 0x1fe2a <verifySpace>
   1fd3e:	85 e4       	ldi	r24, 0x45	; 69
    switch (memtype) {
   1fd40:	c8 12       	cpse	r12, r24
   1fd42:	12 c0       	rjmp	.+36     	; 0x1fd68 <main+0x164>
   1fd44:	de 5f       	subi	r29, 0xFE	; 254
   1fd46:	48 01       	movw	r8, r16
   1fd48:	a1 2c       	mov	r10, r1
   1fd4a:	92 e0       	ldi	r25, 0x02	; 2
   1fd4c:	b9 2e       	mov	r11, r25
   1fd4e:	ac 16       	cp	r10, r28
        while(len--) {
   1fd50:	bd 06       	cpc	r11, r29
   1fd52:	09 f4       	brne	.+2      	; 0x1fd56 <main+0x152>
   1fd54:	4e c0       	rjmp	.+156    	; 0x1fdf2 <main+0x1ee>
   1fd56:	f5 01       	movw	r30, r10
	    eeprom_write_byte((address.bptr++), *(mybuff.bptr++));
   1fd58:	61 91       	ld	r22, Z+
   1fd5a:	5f 01       	movw	r10, r30
   1fd5c:	c4 01       	movw	r24, r8
   1fd5e:	8c d0       	rcall	.+280    	; 0x1fe78 <eeprom_write_byte>
   1fd60:	ff ef       	ldi	r31, 0xFF	; 255
   1fd62:	8f 1a       	sub	r8, r31
   1fd64:	9f 0a       	sbc	r9, r31
   1fd66:	f3 cf       	rjmp	.-26     	; 0x1fd4e <main+0x14a>
   1fd68:	83 e0       	ldi	r24, 0x03	; 3
   1fd6a:	f8 01       	movw	r30, r16
	    __boot_page_erase_short(address.word);
   1fd6c:	87 bf       	out	0x37, r24	; 55
   1fd6e:	e8 95       	spm
   1fd70:	07 b6       	in	r0, 0x37	; 55
   1fd72:	00 fc       	sbrc	r0, 0
	    boot_spm_busy_wait();
   1fd74:	fd cf       	rjmp	.-6      	; 0x1fd70 <main+0x16c>
   1fd76:	a0 e0       	ldi	r26, 0x00	; 0
   1fd78:	b2 e0       	ldi	r27, 0x02	; 2
   1fd7a:	f8 01       	movw	r30, r16
   1fd7c:	8d 91       	ld	r24, X+
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
   1fd7e:	9d 91       	ld	r25, X+
   1fd80:	0c 01       	movw	r0, r24
   1fd82:	f7 be       	out	0x37, r15	; 55
   1fd84:	e8 95       	spm
   1fd86:	11 24       	eor	r1, r1
	    } while (len -= 2);
   1fd88:	22 97       	sbiw	r28, 0x02	; 2
   1fd8a:	32 96       	adiw	r30, 0x02	; 2
   1fd8c:	20 97       	sbiw	r28, 0x00	; 0
	    __boot_page_write_short(address.word);
   1fd8e:	b1 f7       	brne	.-20     	; 0x1fd7c <main+0x178>
   1fd90:	f8 01       	movw	r30, r16
   1fd92:	e7 be       	out	0x37, r14	; 55
	    boot_spm_busy_wait();
   1fd94:	e8 95       	spm
	    __boot_rww_enable_short();
   1fd96:	07 b6       	in	r0, 0x37	; 55
   1fd98:	00 fc       	sbrc	r0, 0
   1fd9a:	fd cf       	rjmp	.-6      	; 0x1fd96 <main+0x192>
      GETLENGTH(length);
   1fd9c:	d7 be       	out	0x37, r13	; 55
   1fd9e:	e8 95       	spm
   1fda0:	28 c0       	rjmp	.+80     	; 0x1fdf2 <main+0x1ee>
   1fda2:	31 d0       	rcall	.+98     	; 0x1fe06 <getch>
   1fda4:	c8 2f       	mov	r28, r24
   1fda6:	d0 e0       	ldi	r29, 0x00	; 0
   1fda8:	dc 2f       	mov	r29, r28
   1fdaa:	cc 27       	eor	r28, r28
   1fdac:	2c d0       	rcall	.+88     	; 0x1fe06 <getch>
      desttype = getch();
   1fdae:	5e 01       	movw	r10, r28
   1fdb0:	a8 2a       	or	r10, r24
   1fdb2:	29 d0       	rcall	.+82     	; 0x1fe06 <getch>
      verifySpace();
   1fdb4:	98 2e       	mov	r9, r24
   1fdb6:	39 d0       	rcall	.+114    	; 0x1fe2a <verifySpace>
   1fdb8:	e8 01       	movw	r28, r16

static inline void read_mem(uint8_t memtype, addr16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
   1fdba:	f5 e4       	ldi	r31, 0x45	; 69

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((address.bptr++)));
   1fdbc:	9f 12       	cpse	r9, r31
   1fdbe:	0b c0       	rjmp	.+22     	; 0x1fdd6 <main+0x1d2>
   1fdc0:	ce 01       	movw	r24, r28
   1fdc2:	52 d0       	rcall	.+164    	; 0x1fe68 <eeprom_read_byte>
	} while (--length);
   1fdc4:	19 d0       	rcall	.+50     	; 0x1fdf8 <putch>
   1fdc6:	81 e0       	ldi	r24, 0x01	; 1
   1fdc8:	a8 1a       	sub	r10, r24
   1fdca:	b1 08       	sbc	r11, r1
   1fdcc:	21 96       	adiw	r28, 0x01	; 1
   1fdce:	a1 14       	cp	r10, r1
   1fdd0:	b1 04       	cpc	r11, r1
   1fdd2:	b1 f7       	brne	.-20     	; 0x1fdc0 <main+0x1bc>
	    // Since RAMPZ should already be set, we need to use EPLM directly.
	    // Also, we can use the autoincrement version of lpm to update "address"
	    //      do putch(pgm_read_byte_near(address++));
	    //      while (--length);
	    // read a Flash and increment the address (may increment RAMPZ)
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
   1fdd4:	0e c0       	rjmp	.+28     	; 0x1fdf2 <main+0x1ee>
   1fdd6:	fe 01       	movw	r30, r28
   1fdd8:	87 91       	elpm	r24, Z+
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
	    putch(ch);
   1fdda:	ef 01       	movw	r28, r30
   1fddc:	0d d0       	rcall	.+26     	; 0x1fdf8 <putch>
	} while (--length);
   1fdde:	e1 e0       	ldi	r30, 0x01	; 1
   1fde0:	ae 1a       	sub	r10, r30
   1fde2:	b1 08       	sbc	r11, r1
   1fde4:	c1 f7       	brne	.-16     	; 0x1fdd6 <main+0x1d2>
   1fde6:	05 c0       	rjmp	.+10     	; 0x1fdf2 <main+0x1ee>
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1fde8:	81 35       	cpi	r24, 0x51	; 81
   1fdea:	11 f4       	brne	.+4      	; 0x1fdf0 <main+0x1ec>
      watchdogConfig(WATCHDOG_16MS);
   1fdec:	88 e0       	ldi	r24, 0x08	; 8
   1fdee:	17 d0       	rcall	.+46     	; 0x1fe1e <watchdogConfig>
   1fdf0:	1c d0       	rcall	.+56     	; 0x1fe2a <verifySpace>
      verifySpace();
   1fdf2:	80 e1       	ldi	r24, 0x10	; 16
   1fdf4:	01 d0       	rcall	.+2      	; 0x1fdf8 <putch>
    putch(STK_OK);
   1fdf6:	42 cf       	rjmp	.-380    	; 0x1fc7c <main+0x78>

0001fdf8 <putch>:
   1fdf8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  }
   1fdfc:	95 ff       	sbrs	r25, 5
    while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
   1fdfe:	fc cf       	rjmp	.-8      	; 0x1fdf8 <putch>
  UART_UDR = ch;
   1fe00:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
   1fe04:	08 95       	ret

0001fe06 <getch>:
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
   1fe06:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fe0a:	87 ff       	sbrs	r24, 7
   1fe0c:	fc cf       	rjmp	.-8      	; 0x1fe06 <getch>
  if (!(UART_SRA & _BV(FE0))) {
   1fe0e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fe12:	84 fd       	sbrc	r24, 4
   1fe14:	01 c0       	rjmp	.+2      	; 0x1fe18 <getch+0x12>
  __asm__ __volatile__ (
   1fe16:	a8 95       	wdr
  ch = UART_UDR;
   1fe18:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
   1fe1c:	08 95       	ret

0001fe1e <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe1e:	e0 e6       	ldi	r30, 0x60	; 96
   1fe20:	f0 e0       	ldi	r31, 0x00	; 0
   1fe22:	98 e1       	ldi	r25, 0x18	; 24
   1fe24:	90 83       	st	Z, r25
  WDTCSR = x;
   1fe26:	80 83       	st	Z, r24
   1fe28:	08 95       	ret

0001fe2a <verifySpace>:
  if (getch() != CRC_EOP) {
   1fe2a:	ed df       	rcall	.-38     	; 0x1fe06 <getch>
   1fe2c:	80 32       	cpi	r24, 0x20	; 32
   1fe2e:	19 f0       	breq	.+6      	; 0x1fe36 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe30:	88 e0       	ldi	r24, 0x08	; 8
   1fe32:	f5 df       	rcall	.-22     	; 0x1fe1e <watchdogConfig>
   1fe34:	ff cf       	rjmp	.-2      	; 0x1fe34 <verifySpace+0xa>
  putch(STK_INSYNC);
   1fe36:	84 e1       	ldi	r24, 0x14	; 20
   1fe38:	df cf       	rjmp	.-66     	; 0x1fdf8 <putch>

0001fe3a <getNch>:
void getNch(uint8_t count) {
   1fe3a:	cf 93       	push	r28
   1fe3c:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fe3e:	e3 df       	rcall	.-58     	; 0x1fe06 <getch>
   1fe40:	c1 50       	subi	r28, 0x01	; 1
   1fe42:	e9 f7       	brne	.-6      	; 0x1fe3e <getNch+0x4>
}
   1fe44:	cf 91       	pop	r28
  verifySpace();
   1fe46:	f1 cf       	rjmp	.-30     	; 0x1fe2a <verifySpace>

0001fe48 <do_spm>:
   1fe48:	fc 01       	movw	r30, r24
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
   1fe4a:	0a 01       	movw	r0, r20
   1fe4c:	67 bf       	out	0x37, r22	; 55
   1fe4e:	e8 95       	spm
   1fe50:	11 24       	eor	r1, r1
   1fe52:	07 b6       	in	r0, 0x37	; 55
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
   1fe54:	00 fc       	sbrc	r0, 0
   1fe56:	fd cf       	rjmp	.-6      	; 0x1fe52 <do_spm+0xa>
   1fe58:	66 70       	andi	r22, 0x06	; 6
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
   1fe5a:	29 f0       	breq	.+10     	; 0x1fe66 <do_spm+0x1e>
   1fe5c:	45 2b       	or	r20, r21
   1fe5e:	19 f4       	brne	.+6      	; 0x1fe66 <do_spm+0x1e>
   1fe60:	81 e1       	ldi	r24, 0x11	; 17
      // Reenable read access to flash
      __boot_rww_enable_short();
   1fe62:	87 bf       	out	0x37, r24	; 55
   1fe64:	e8 95       	spm
   1fe66:	08 95       	ret

0001fe68 <eeprom_read_byte>:
   1fe68:	f9 99       	sbic	0x1f, 1	; 31
   1fe6a:	fe cf       	rjmp	.-4      	; 0x1fe68 <eeprom_read_byte>
   1fe6c:	92 bd       	out	0x22, r25	; 34
   1fe6e:	81 bd       	out	0x21, r24	; 33
   1fe70:	f8 9a       	sbi	0x1f, 0	; 31
   1fe72:	99 27       	eor	r25, r25
   1fe74:	80 b5       	in	r24, 0x20	; 32
   1fe76:	08 95       	ret

0001fe78 <eeprom_write_byte>:
   1fe78:	26 2f       	mov	r18, r22

0001fe7a <eeprom_write_r18>:
   1fe7a:	f9 99       	sbic	0x1f, 1	; 31
   1fe7c:	fe cf       	rjmp	.-4      	; 0x1fe7a <eeprom_write_r18>
   1fe7e:	1f ba       	out	0x1f, r1	; 31
   1fe80:	92 bd       	out	0x22, r25	; 34
   1fe82:	81 bd       	out	0x21, r24	; 33
   1fe84:	20 bd       	out	0x20, r18	; 32
   1fe86:	0f b6       	in	r0, 0x3f	; 63
   1fe88:	f8 94       	cli
   1fe8a:	fa 9a       	sbi	0x1f, 2	; 31
   1fe8c:	f9 9a       	sbi	0x1f, 1	; 31
   1fe8e:	0f be       	out	0x3f, r0	; 63
   1fe90:	01 96       	adiw	r24, 0x01	; 1
   1fe92:	08 95       	ret

0001fe94 <f_version>:
   1fe94:	56 65 72 73 69 6f 6e 3d 38 2e 31 00                 Version=8.1.

0001fea0 <fOPTIBOOT_CUSTOMVER>:
   1fea0:	4f 50 54 49 42 4f 4f 54 5f 43 55 53 54 4f 4d 56     OPTIBOOT_CUSTOMV
   1feb0:	45 52 3d 30 00                                      ER=0.

0001feb5 <f_device>:
   1feb5:	44 65 76 69 63 65 3d 61 74 6d 65 67 61 31 32 38     Device=atmega128
   1fec5:	30 00                                               0.

0001fec7 <fF_CPU>:
   1fec7:	46 5f 43 50 55 3d 31 36 30 30 30 30 30 30 4c 00     F_CPU=16000000L.

0001fed7 <fBIGBOOT>:
   1fed7:	42 49 47 42 4f 4f 54 3d 31 00                       BIGBOOT=1.

0001fee1 <f_date>:
   1fee1:	42 75 69 6c 74 3a 4d 61 79 20 32 39 20 32 30 32     Built:May 29 202
   1fef1:	30 3a 30 31 3a 30 32 3a 34 30 00                    0:01:02:40.

0001fefc <fUART>:
   1fefc:	55 41 52 54 3d 30 00                                UART=0.

0001ff03 <fBAUD_RATE>:
   1ff03:	42 41 55 44 5f 52 41 54 45 3d 31 31 35 32 30 30     BAUD_RATE=115200
	...

0001ff14 <f_LED>:
   1ff14:	4c 45 44 3d 42 37 00                                LED=B7.

0001ff1b <fLED_START_FLASHES>:
   1ff1b:	4c 45 44 5f 53 54 41 52 54 5f 46 4c 41 53 48 45     LED_START_FLASHE
   1ff2b:	53 3d 33 00                                         S=3.
